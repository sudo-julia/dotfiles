#                    |
#          _  /  __| __ \   __| __|
#            / \__ \ | | | |   (
#          ___|____/_| |_|_|  \___|
                                     

## completion options
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{[:lower:]}={[:upper:]}' 'r:|[._-]=** r:|=**'
zstyle ':completion:*' max-errors 2
zstyle ':completion:*' menu select
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' verbose true
zstyle ':completion:*' list-colors "${(@s.:.)LS_COLORS}"
zstyle ':completion::complete:*' gain-privileges 1
zstyle :compinstall filename "${HOME}/.zshrc"
autoload -Uz promptinit
promptinit

## history settings
HISTFILE="${HOME}/lib/zsh_history"
HISTSIZE=25000
SAVEHIST=25000

## misc setopt(s)
setopt extendedglob COMPLETE_ALIASES NO_CASE_GLOB
unsetopt beep

# actual prompts
# TODO fine-tune the reds before switching to a darker yellow
# light yellow, light reds
# PROMPT='%B%F{magenta}%n %2~%f%b %F{yellow}☭  %f%F{red}❥ %(?..[%?])%f '
# light yellow, light heart, bold exit code
 PROMPT='%B%F{magenta}%n %2~%f%b %F{yellow}☭  %f%F{red}❥ %f%F{#f96f9d}%(?..[%?])%f '
# bold yellow, light heart, bold exit code
#PROMPT='%B%F{magenta}%n %2~%f%b %F{#ffc144}☭  %f%F{red}❥ %f%F{#f96f9d}%(?..[%?])%f '
RPROMPT='[%D{%T}]'
#RPROMPT='[%D{%H:%M:%S}'

## evals/sources
eval "$(zoxide init zsh)"
eval "$(thefuck --alias)"
source '/usr/share/fzf/key-bindings.zsh'
source '/usr/share/fzf/completion.zsh'
[[ -f "${HOME}/.zsh_aliases" ]] && source "${HOME}/.zsh_aliases"

## key bindings
# editor mode
bindkey -v
export KEYTIMEOUT=10
bindkey -M viins 'jk' vi-cmd-mode

# history fuzzy search
autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search 
zle -N down-line-or-beginning-search
bindkey '^[[A' up-line-or-beginning-search # up arrow
bindkey '^[[B' down-line-or-beginning-search # down arrow

# clear line
bindkey \^U backward-kill-line

# shift-tab to backwards
bindkey '^[[Z' reverse-menu-complete

# movement within line
bindkey '^[[1;5C' forward-word # right arrow w control
bindkey '^[[1;5D' backward-word # left arrow w control
bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

## fzf settings
_fzf_compgen_path() {
	fd --hidden --follow --exclude ".git" . "$1"
}

_fzf_compgen_dir() {
	fd --type d --hidden --follow --exclude ".git" . "$1"
}
#
## functions
# restart dunst
dunst-restart() {
    pkill dunst
    while pgrep -u "${UID}" -x dunst; do sleep 1; done
    nohup dunst -config ~/.config/dunst/dunstrc </dev/null >/dev/null 2>&1 &
    notify-send "dunst restarted!"
}

# change a filename of an html file to the first three words in its <title>
filename-to-title() {
    for f in "$1"; do
        n="$( awk '/<title>/{print $1,$2,$3}' "$f" | sed 's/<title>//' | tr '[A-Z]' '[a-z]' | sed 's/ /_/g' )"
        #n="$( cat "$f" | pup 'title' | rg -vN 'title' | sd '^ ' '' | awk '{print tolower($1$2$3)}' | sd '&#3[49];' '_' )"
        mv "$f" "$n"
    done
}

get-audio() {
	youtube-dl -x --audio-format best "$1"
}

# get mimetype of a file
mt() {
    xdg-mime query filetype "$1"
}

# make and change into directory
mkcd() {
    mkdir -p -- "$1" &&
    cd -P -- "$1"
}

# neovim - formatter plugin spams stderr so this fixes it
function n() {
    nvim "$@" 2>/dev/null
}

# build python project in current dir
pybuild() {
	python3 './setup.py' sdist bdist_wheel
}

# initialize a python dev directory
pyinit() {
    local full_path="$( readlink -m "$1" )"
    pydir "${full_path}/${1}" \
    && mkdir "${full_path}/tests" \
    && touch "${full_path}/tests/__init__.py" \
    && touch "${full_path}/${1}/__init__.py"
}

# install a python package through pip
pinstall() {
    if [ ! "$1" ]; then
        package='.'
    else
        package="$1"
    fi

    pip install --user --upgrade -- "$package"
}

remove-history-duplicates() {
	gawk -i inplace '!x[$0]++' "${HISTFILE}"
}

## plugin management with zinit for speed
source "${HOME}/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# plugins
zinit ice wait lucid atload'_zsh_autosuggest_start'
zinit light zsh-users/zsh-autosuggestions
zinit for \
	light-mode zsh-users/zsh-autosuggestions \
	light-mode zdharma/fast-syntax-highlighting \
    light-mode _local/cursor_mode
    # light-mode skywind3000/z.lua \
    


# use compinit cache if available
autoload -Uz compinit
if [[ -n "${HOME}/lib/zcompdump" ]]; then
    compinit -d "${HOME}/lib/zcompdump"
else
    compinit -C -d "${HOME}/lib/zcompdump"
fi
